/*
 * 借用规则:
 * 1. 在任何给定的时间里，一个值只能拥有一个可变引用
 * 2. 在任何给定的时间里，一个值存在不可变引用时，可变引用不能存在
 * 3. 引用在使用时值必须是有效的
 * 
 * 内部可变性:
 * 内部可变性是Rust的设计模式之一，它允许你在只持有"不可变引用"的前提下对数据进行修改
 * 为实现内部可变性，数据结构中使用了unsafe代码来绕过rust正常的可变性和借用规则
 * 
 * RcfCell<T>:
 * 与Rc<T>不同，RcfCell<T>类型代表了其持有数据的唯一所有权
 * 与Box<T>在编译阶段就强制代码遵守借用规则不同，RcfCell只会在运行时检查借用规则，若规则不满足则会panic
 * 与Rc<T>类似，RcfCell<T>只能用于单线程场景
 */ 

fn main() {
    println!("Hello, world!");
}
