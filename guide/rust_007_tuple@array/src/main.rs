fn main() {
    let tup = (500, 6.4, 1);
    println!("{}, {}, {}", tup.0, tup.1, tup.2);
    // 创建Tuple, 是在小括号里将几个元素值用逗号分开
    // Tuple中的每个位置都对应一个类型，各元素的类型可以不同
    // Tuple的长度是固定的，一旦声明就无法改变
    // 同过点标记法来访问Tuple的元素，句点(.)后接元素的索引

    let tup = ("I love you", 520, '!');
    println!("{} {} {}", tup.0, tup.1, tup.2);
    let (x, y, z) = tup;
    println!("{} {} {}", x, y, z);
    // 也可以使用模式匹配来解构一个Tuple来获取元素的值

    let tup = ((1, 2), (3, 4, 5), (6, 7, 8, 9));
    println!("{} {} {}", tup.0 .1, tup.1 .2, tup.2 .0);
    // Tuple的元素类型可以是Tuple或array, 且长度可以和类型可以不同

    let arr = [1, 2, 3, 4, 5];
    println!("{} {} {} {} {}", arr[0], arr[1], arr[2], arr[3], arr[4]);
    // 声明一个数组(Array), 在中括号里各元素用逗号分开
    // 数组可以将多个相同类型的值放在一个类型中
    // 数组的长度也是固定的

    let arr = [[1,6],[2,5],[4,7]];
    println!("{:?}", arr);
    let arr = [(8,6.5,7),(8,9.9,6),(8,7.0,458)];
    println!("{:?}", arr);
    // Array的元素类型也可以是Tuple或array, 但长度和类型必须都相同

    let arr = [0;10];  // 相当于 let arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    println!("{:?}", arr);
    // 如果数组的每个元素都相同，那么可以在中括号里指定初始值加分号加数组长度的形式来声明数组
}
